admin:
  access_log_path: /dev/stdout
  address:
    socket_address: { address: 0.0.0.0, port_value: 9902 }

node:
  id: "node_02"
  cluster: "cluster_01"

layered_runtime:
  layers:
  - name: "static_runtime"
    static_layer:
      http_access_log_sample: 0
  - name: "admin_runtime"
    admin_layer: {}

dynamic_resources:
  cds_config:
    resource_api_version: V3
    ads: {}
  ads_config:
    api_type: GRPC
    transport_api_version: V3
    grpc_services:
      envoy_grpc:
        cluster_name: xds-cluster

static_resources:
  listeners:
  - name: http_listener_for_envoymesh
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 10001
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: envoy-mesh
          generate_request_id: false
          stream_error_on_invalid_http_message: true
          rds:
            route_config_name: ingress-route-config-mesh
            config_source:
              resource_api_version: V3
              ads: {}
          local_reply_config:
            # status rewrite follow document https://msdata.visualstudio.com/Vienna/_wiki/wikis/Vienna.wiki/13239/Inference-Response-Codes
            # envoy response flags reference https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage#config-access-log-format-response-flags
            mappers:
            - filter:
                response_flag_filter:
                  flags: ["UO"]
              status_code: 429
            - filter:
                response_flag_filter:
                  flags: ["LR", "UR", "UC", "UF", "UH"]
              headers_to_add:
              - header:
                  key: "ms-azureml-model-error-reason"
                  value: "model_not_ready"
                append: false
              status_code: 424
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              # 1. rewrite all non-200 status code which returns from customer container to 424
              # 2. copy 'x-envoy-upstream-service-time' header to 'ms-azureml-model-time' for first layer to log model time
              # 3. backup request headers to dynamicMetadata for logging
              inline_code: |
                require "app.envoy_lua_filter"

                function envoy_on_request(request_handle)
                  backupAttemptCountHeader(request_handle)
                  -- backupRequestHeaders(request_handle)
                  mdcSendAsync(request_handle, true)
                end

                function envoy_on_response(response_handle)
                  -- check if response is generated by circuit breaker or local reply
                  if not (isUpstreamOverflow(response_handle) or isUpstreamModelNotReady(response_handle)) then
                    rewriteStatusNon200(response_handle)
                    appendEnvoyModelTime(response_handle)
                    mdcSendAsync(response_handle, false)
                  end
                end
          - name: envoy.filters.http.router
          codec_type: AUTO
          access_log:
          - name: envoy.file_access_log
            filter:
              runtime_filter:
                runtime_key: http_access_log_sample
                percent_sampled:
                  numerator: 0
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /dev/stdout
              log_format:
                json_format:
                  start_time: "%START_TIME(%Y-%m-%dT%H:%M:%S.%6fZ)%"
                  method: "%REQ(:METHOD)%"
                  path: "%REQ(:PATH)%"
                  duration: "%DURATION%"
                  original-path: "%REQ(X-ENVOY-ORIGINAL-PATH)%"
                  protocol: "%PROTOCOL%"
                  req_duration: "%REQUEST_DURATION%"
                  resp_code: "%RESPONSE_CODE%"
                  resp_code_details: "%RESPONSE_CODE_DETAILS%"
                  original_code: "%DYNAMIC_METADATA(envoy.filters.http.lua:originalCode)%"
                  resp_tx_duration: "%RESPONSE_TX_DURATION%"
                  resp_flags: "%RESPONSE_FLAGS%"
                  resp_duration: "%RESPONSE_DURATION%"
                  bytes_recv: "%BYTES_RECEIVED%"
                  bytes_sent: "%BYTES_SENT%"
                  x-up-time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                  x-fwd-for: "%REQ(X-FORWARDED-FOR)%"
                  x-req-id: "%REQ(X-REQUEST-ID):36%"
                  x-ms-req-id: "%REQ(X-MS-REQUEST-ID):36%"
                  x-ms-req-id-resp: "%RESP(X-MS-REQUEST-ID):36%"
                  user-agent: "%REQ(USER-AGENT)%"
                  authority: "%REQ(:AUTHORITY)%"
                  up_host: "%UPSTREAM_HOST%"
                  up_cluster: "%UPSTREAM_CLUSTER%"
                  route_name: "%ROUTE_NAME%"
                  up_transport_fail: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                  local_reply_body: "%LOCAL_REPLY_BODY%"
                  attempt_cnt: "%DYNAMIC_METADATA(envoy.filters.http.lua:attemptCount)%"
 
  clusters:
  - name: xds-cluster
    connect_timeout: 2.00s
    type: logical_dns
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    upstream_connection_options:
      # configure a TCP keep-alive to detect and reconnect to the admin
      # server in the event of a TCP socket half open connection
      tcp_keepalive: {}
    load_assignment:
      cluster_name: xds-cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: localhost
                port_value: 12345

  - name: mdc-cluster
    connect_timeout: 2.00s
    type: logical_dns
    lb_policy: ROUND_ROBIN
    http_protocol_options: {}
    upstream_connection_options:
      tcp_keepalive: {}
    load_assignment:
      cluster_name: mdc-cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: localhost
                port_value: 50011
