admin:
  access_log_path: /dev/stdout
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

node:
  id: "node_01"
  cluster: "cluster_01"

dynamic_resources:
  cds_config:
    resource_api_version: V3
    ads: {}
  ads_config:
    api_type: GRPC
    transport_api_version: V3
    grpc_services:
      envoy_grpc:
        cluster_name: xds-cluster

static_resources:
  listeners:
  - name: http_listener_for_fd
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 10000
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: http
          common_http_protocol_options:
            idle_timeout: 60s
            max_connection_duration: 240s
          generate_request_id: true
          preserve_external_request_id: true
          stream_error_on_invalid_http_message: true
          route_config:
            virtual_hosts:
            - name: ingress-route-config
              domains: "*"
              include_request_attempt_count: true
              routes:
              - match: { prefix: "/" }
                route:
                  cluster: manymodel-middle-cluster
                  timeout: "{{MODEL_REQUEST_TIMEOUT}}s"
                  retry_policy:
                    retry_on: connect-failure, reset, retriable-headers
                    num_retries: {{MIR_ENVOY_RETRY_ATTEMPTS}}
                    retry_back_off:
                      base_interval: 0.001s
                      max_interval: 0.005s
                    # retry matcher for fast-fail scenario
                    retriable_headers:
                    - name: x-envoy-overloaded
                      exact_match: "true"
          local_reply_config:
            mappers:
            - filter:
                response_flag_filter:
                  flags: ["UT"]
              status_code: 408
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                require "app.envoy_lua_filter"

                function envoy_on_response(response_handle)
                  if isUpstreamOverflow(response_handle) then
                    rewriteUpstreamOverflowResponse(response_handle)
                  end
                end
          - name: envoy.filters.http.router
          codec_type: AUTO
          access_log:
          - name: envoy.file_access_log
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /dev/stdout
              log_format:
                json_format:
                  start_time: "%START_TIME(%Y-%m-%dT%H:%M:%S.%6fZ)%"
                  method: "%REQ(:METHOD)%"
                  path: "%REQ(:PATH)%"
                  duration: "%DURATION%"
                  original-path: "%REQ(X-ENVOY-ORIGINAL-PATH)%"
                  protocol: "%PROTOCOL%"
                  req_duration: "%REQUEST_DURATION%"
                  resp_code: "%RESPONSE_CODE%"
                  resp_code_details: "%RESPONSE_CODE_DETAILS%"
                  resp_tx_duration: "%RESPONSE_TX_DURATION%"
                  resp_flags: "%RESPONSE_FLAGS%"
                  resp_duration: "%RESPONSE_DURATION%"
                  bytes_recv: "%BYTES_RECEIVED%"
                  bytes_sent: "%BYTES_SENT%"
                  x-up-time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                  x-fwd-for: "%REQ(X-FORWARDED-FOR)%"
                  x-req-id: "%REQ(X-REQUEST-ID)%"
                  x-ms-req-id: "%REQ(X-MS-REQUEST-ID):36%"
                  x-ms-req-id-resp: "%RESP(X-MS-REQUEST-ID):36%"
                  user-agent: "%REQ(USER-AGENT)%"
                  authority: "%REQ(:AUTHORITY)%"
                  up_host: "%UPSTREAM_HOST%"
                  up_cluster: "%UPSTREAM_CLUSTER%"
                  route_name: "%ROUTE_NAME%"
                  up_transport_fail: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                  local_reply_body: "%LOCAL_REPLY_BODY%"
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_params:
              tls_minimum_protocol_version: TLSv1_2
              # List of cipher suites in compliance with Azure Security
              # https://liquid.microsoft.com/Web/Object/Read/MS.Security/Requirements/Microsoft.Security.Cryptography.10031#Cipher%20Suites
              cipher_suites:
              # TLS 1.3
              - TLS_AES_256_GCM_SHA384
              - TLS_AES_128_GCM_SHA256
              # TLS 1.2
              - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
              - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
              - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
              - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
            tls_certificate_sds_secret_configs:
            - name: server-cert
              sds_config:
                resource_api_version: V3
                ads: {}
            validation_context_sds_secret_config:
              name: validation-context-http
              sds_config:
                resource_api_version: V3
                ads: {}
            alpn_protocols: [ "h2,http/1.1" ]
    per_connection_buffer_limit_bytes: 1572864 #=1.5M

  - name: http_listener_for_manymodel
    address:
      socket_address:
        protocol: TCP
        address: 127.0.0.1
        port_value: 20001
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: http
          common_http_protocol_options:
            idle_timeout: 60s
          generate_request_id: false
          stream_error_on_invalid_http_message: true
          rds:
            route_config_name: ingress-route-config-manymodel
            config_source:
              resource_api_version: V3
              ads: {}
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                function envoy_on_request(request_handle)
                  local retryAttempts = tonumber(request_handle:headers():get("x-envoy-attempt-count"))
                  if retryAttempts and retryAttempts > 5 then
                    request_handle:headers():replace("x-mir-route-all", "true")
                  end
                end
          - name: envoy.filters.http.router
          codec_type: AUTO
          access_log:
          - name: envoy.file_access_log
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /dev/stdout
              log_format:
                json_format:
                  start_time: "%START_TIME(%Y-%m-%dT%H:%M:%S.%6fZ)%"
                  method: "%REQ(:METHOD)%"
                  path: "%REQ(:PATH)%"
                  duration: "%DURATION%"
                  original-path: "%REQ(X-ENVOY-ORIGINAL-PATH)%"
                  protocol: "%PROTOCOL%"
                  req_duration: "%REQUEST_DURATION%"
                  resp_code: "%RESPONSE_CODE%"
                  resp_code_details: "%RESPONSE_CODE_DETAILS%"
                  resp_tx_duration: "%RESPONSE_TX_DURATION%"
                  resp_flags: "%RESPONSE_FLAGS%"
                  resp_duration: "%RESPONSE_DURATION%"
                  bytes_recv: "%BYTES_RECEIVED%"
                  bytes_sent: "%BYTES_SENT%"
                  x-up-time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                  x-fwd-for: "%REQ(X-FORWARDED-FOR)%"
                  x-req-id: "%REQ(X-REQUEST-ID)%"
                  x-ms-req-id: "%REQ(X-MS-REQUEST-ID):36%"
                  x-ms-req-id-resp: "%RESP(X-MS-REQUEST-ID):36%"
                  user-agent: "%REQ(USER-AGENT)%"
                  authority: "%REQ(:AUTHORITY)%"
                  up_host: "%UPSTREAM_HOST%"
                  up_cluster: "%UPSTREAM_CLUSTER%"
                  route_name: "%ROUTE_NAME%"
                  up_transport_fail: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                  local_reply_body: "%LOCAL_REPLY_BODY%"

  - name: http_listener_for_envoymesh
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 10001
    # this is used for response body buffering
    per_connection_buffer_limit_bytes: 1572864
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: envoy-mesh
          common_http_protocol_options:
            idle_timeout: 60s
            # max_connection_duration: 240s
          generate_request_id: false
          stream_error_on_invalid_http_message: true
          rds:
            route_config_name: ingress-route-config-mesh
            config_source:
              resource_api_version: V3
              ads: {}
          local_reply_config:
            # status rewrite follow document https://msdata.visualstudio.com/Vienna/_wiki/wikis/Vienna.wiki/13239/Inference-Response-Codes
            # envoy response flags reference https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage#config-access-log-format-response-flags
            mappers:
            - filter:
                response_flag_filter:
                  flags: ["LR", "UR", "UC"]
              status_code: 424
              headers_to_add:
              - header:
                  key: "ms-azureml-model-error-reason"
                  value: "model_not_ready"
                append: false
            - filter:
                # (metadata.get("envoy.filters.http.lua", "isBufferingBody")==true && status_code==500)
                # can't match RESPONSE_CODE_DETAILS since v1.16
                and_filter:
                  filters:
                  - metadata_filter:
                      matcher:
                        filter: envoy.filters.http.lua
                        path:
                        - key: isBufferingBody
                        value:
                          bool_match: true
                  - status_code_filter:
                      comparison:
                        op: EQ
                        value:
                          default_value: 500
                          runtime_key: key_a
              status_code: 424
              headers_to_add:
              - header:
                  key: "ms-azureml-model-error-reason"
                  value: "response_payload_too_large"
                append: false
              - header:
                  key: "ms-azureml-model-error-statuscode"
                  value: "%DYNAMIC_METADATA([\"envoy.filters.http.lua\", \"originalCode\"])%"
                append: false
              body_format_override: 
                text_format: "%RESPONSE_CODE_DETAILS%"
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              # 1. rewrite all non-200 status code which returns from customer container to 424
              # 2. use response_handle:body() to force buffering response body
              # 3. backup request headers to dynamicMetadata for logging
              inline_code: |
                require "app.envoy_lua_filter"

                function envoy_on_request(request_handle)
                  backupRequestHeaders(request_handle)
                  mdcSendAsync(request_handle, true)
                end

                function envoy_on_response(response_handle)
                  -- check if response is generated by circuit breaker or local reply
                  if not (isUpstreamOverflow(response_handle) or isUpstreamModelNotReady(response_handle)) then
                    forceBufferingResponseBody(response_handle)
                    rewriteStatusNon200(response_handle)
                    mdcSendAsync(response_handle, false)
                  end
                end
          - name: envoy.filters.http.router
          codec_type: AUTO
          access_log:
          - name: envoy.file_access_log
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /dev/stdout
              log_format:
                json_format:
                  start_time: "%START_TIME(%Y-%m-%dT%H:%M:%S.%6fZ)%"
                  method: "%REQ(:METHOD)%"
                  path: "%REQ(:PATH)%"
                  duration: "%DURATION%"
                  original-path: "%REQ(X-ENVOY-ORIGINAL-PATH)%"
                  protocol: "%PROTOCOL%"
                  req_duration: "%REQUEST_DURATION%"
                  resp_code: "%RESPONSE_CODE%"
                  resp_code_details: "%RESPONSE_CODE_DETAILS%"
                  original_code: "%DYNAMIC_METADATA(envoy.filters.http.lua:originalCode)%"
                  resp_tx_duration: "%RESPONSE_TX_DURATION%"
                  resp_flags: "%RESPONSE_FLAGS%"
                  resp_duration: "%RESPONSE_DURATION%"
                  bytes_recv: "%BYTES_RECEIVED%"
                  bytes_sent: "%BYTES_SENT%"
                  x-up-time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                  x-fwd-for: "%REQ(X-FORWARDED-FOR)%"
                  x-req-id: "%DYNAMIC_METADATA(envoy.filters.http.lua:requestHeaders:x-request-id)%"
                  x-ms-req-id: "%REQ(X-MS-REQUEST-ID):36%"
                  x-ms-req-id-resp: "%RESP(X-MS-REQUEST-ID):36%"
                  user-agent: "%REQ(USER-AGENT)%"
                  authority: "%REQ(:AUTHORITY)%"
                  up_host: "%UPSTREAM_HOST%"
                  up_cluster: "%UPSTREAM_CLUSTER%"
                  route_name: "%ROUTE_NAME%"
                  up_transport_fail: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                  local_reply_body: "%LOCAL_REPLY_BODY%"

  - name: http_listener_for_healthz
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 10002
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: envoy-healthz
          common_http_protocol_options:
            idle_timeout: 60s
          route_config:
            virtual_hosts:
            - name: ingress-route-config-healthz
              domains: "*"
              routes:
              - match: { prefix: "/healthz"}
                route:
                  cluster: fd_health_cluster
                  timeout: 2s
                  prefix_rewrite: /v1/vm/healthz
              - match: { prefix: "/discovery"}
                route:
                  cluster: node_discovery_cluster
                  timeout: 2s
                  prefix_rewrite: /v1/vm/discovery
          http_filters:
          - name: envoy.filters.http.router
          codec_type: AUTO

  - name: http_listener_for_diag
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 10003
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: envoy-diag
          common_http_protocol_options:
            idle_timeout: 60s
          route_config:
            virtual_hosts:
            - name: ingress-route-config-diag
              domains: "*"
              routes:
              - match: { prefix: "/"}
                route:
                  cluster: diag-cluster
                  timeout: 15s
          http_filters:
          - name: envoy.filters.http.router
          codec_type: AUTO
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_params:
              tls_minimum_protocol_version: TLSv1_2
              # List of cipher suites in compliance with Azure Security
              # https://liquid.microsoft.com/Web/Object/Read/MS.Security/Requirements/Microsoft.Security.Cryptography.10031#Cipher%20Suites
              cipher_suites:
              # TLS 1.3
              - TLS_AES_256_GCM_SHA384
              - TLS_AES_128_GCM_SHA256
              # TLS 1.2
              - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
              - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
              - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
              - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
            tls_certificate_sds_secret_configs:
            - name: server-cert
              sds_config:
                resource_api_version: V3
                ads: {}
            validation_context_sds_secret_config:
              name: validation-context-diag
              sds_config:
                resource_api_version: V3
                ads: {}
            alpn_protocols: [ "h2,http/1.1" ]
            
  clusters:
  - name: xds-cluster
    connect_timeout: 2.00s
    type: STATIC
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    upstream_connection_options:
      # configure a TCP keep-alive to detect and reconnect to the admin
      # server in the event of a TCP socket half open connection
      tcp_keepalive: {}
    load_assignment:
      cluster_name: xds-cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 10.172.70.42
                port_value: 12345

  # cluster handles request from :10002/healthz, and route to local vmagent
  - name: fd_health_cluster
    connect_timeout: 2.00s
    type: EDS
    lb_policy: ROUND_ROBIN
    upstream_connection_options:
      tcp_keepalive: {}
    # circuit_breakers: 
    eds_cluster_config:
      service_name: fd_health_endpoint
      eds_config:
        resource_api_version: V3
        ads: {}

    # cluster handles request from :10002/discovery, and route to local vmagent
  - name: node_discovery_cluster
    connect_timeout: 2.00s
    type: EDS
    lb_policy: ROUND_ROBIN
    upstream_connection_options:
      tcp_keepalive: {}
    # circuit_breakers: 
    eds_cluster_config:
      service_name: fd_health_endpoint
      eds_config:
        resource_api_version: V3
        ads: {}

  # cluster handles request from :443/*, and randomly route to localhost:20001
  - name: manymodel-middle-cluster
    connect_timeout: 2.00s
    type: STATIC
    lb_policy: ROUND_ROBIN
    http_protocol_options: {}
    upstream_connection_options:
      tcp_keepalive: {}
    circuit_breakers:
      # remove connection and retry limit from middle layer
      thresholds:
      - max_connections: 2147483647
        max_requests: 2147483647
        max_retries: 2147483647
    load_assignment:
      cluster_name: manymodel-middle-endpoint
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 20001

  # cluster handles request from local:20001/*, and randomly route to envoy mesh :10001/*
  - name: fd_mesh_cluster
    connect_timeout: 0.25s
    type: EDS
    lb_policy: {{ENVOY_MESH_LOAD_BALANCE_ALGO}}
    upstream_connection_options:
      tcp_keepalive: {}
    common_lb_config:
      # disable panic mode, always control by active health check
      healthy_panic_threshold:
        value: 0
    # for many model use
    lb_subset_config:
      fallback_policy: ANY_ENDPOINT
      panic_mode_any: false
      list_as_any: true
      subset_selectors:
      - keys: ["model_name"]
    health_checks:
    - timeout: 1s
      interval: 2s
      no_traffic_interval: 2s
      unhealthy_threshold: 1
      healthy_threshold: 1
      http_health_check: 
        path: "/healthz"
      event_log_path: "/dev/stdout"
    circuit_breakers:
      # remove connection and retry limit from mesh layer
      thresholds:
      - max_connections: 2147483647
        max_requests: 2147483647
        max_retries: 2147483647
    eds_cluster_config:
      service_name: fd_mesh_endpoint
      eds_config:
        resource_api_version: V3
        ads: {}
  
  - name: diag-cluster
    connect_timeout: 2.00s
    type: STATIC
    lb_policy: ROUND_ROBIN
    http_protocol_options: {}
    upstream_connection_options:
      tcp_keepalive: {}
    load_assignment:
      cluster_name: diag-cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 5100

  - name: mdc-cluster
    connect_timeout: 2.00s
    type: STATIC
    lb_policy: ROUND_ROBIN
    http_protocol_options: {}
    upstream_connection_options:
      tcp_keepalive: {}
    load_assignment:
      cluster_name: mdc-cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 50011
